(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e528e"],{"92fe":function(e,t,c){"use strict";c.r(t);var r=function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("section",{staticClass:"content element-doc"},[e._m(0),c("demo-block",[c("template",{slot:"source"},[c("element-demo0")],1),c("template",{slot:"highlight"},[c("pre",{pre:!0},[c("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <el-checkbox-dispatcher v-model="checked">备选项</el-checkbox-dispatcher>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      checked: true\n    }\n  }\n}\n<\/script>\n')])])])],2),e._m(1),c("demo-block",[c("template",{slot:"source"},[c("element-demo1")],1),c("template",{slot:"highlight"},[c("pre",{pre:!0},[c("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <el-checkbox-group-dispatcher v-model="checkList">\n    <el-checkbox-dispatcher label="复选框 A"><span style="color: red">123</span></el-checkbox-dispatcher>\n    <el-checkbox-dispatcher label="复选框 B" />\n    <el-checkbox-dispatcher label="复选框 C" />\n    <el-checkbox-dispatcher label="禁用" disabled />\n    <el-checkbox-dispatcher label="选中且禁用" disabled />\n  </el-checkbox-group-dispatcher>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      checkList: [\'选中且禁用\', \'复选框 A\']\n    }\n  }\n}\n<\/script>\n')])])])],2),e._m(2),c("demo-block",[c("template",{slot:"source"},[c("element-demo2")],1),c("template",{slot:"highlight"},[c("pre",{pre:!0},[c("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <div>\n    <el-checkbox-group-dispatcher v-model="checkboxGroup1">\n      <el-checkbox-button-dispatcher v-for="city in cities" :label="city" :key="city">{{ city }}</el-checkbox-button-dispatcher>\n    </el-checkbox-group-dispatcher>\n  </div>\n  <div style="margin-top: 20px">\n    <el-checkbox-group-dispatcher v-model="checkboxGroup2" size="medium">\n      <el-checkbox-button-dispatcher v-for="city in cities" :label="city" :key="city">{{ city }}</el-checkbox-button-dispatcher>\n    </el-checkbox-group-dispatcher>\n  </div>\n  <div style="margin-top: 20px">\n    <el-checkbox-group-dispatcher v-model="checkboxGroup3" size="small">\n      <el-checkbox-button-dispatcher v-for="city in cities" :label="city" :disabled="city === \'北京\'" :key="city">{{ city }}</el-checkbox-button-dispatcher>\n    </el-checkbox-group-dispatcher>\n  </div>\n  <div style="margin-top: 20px">\n    <el-checkbox-group-dispatcher v-model="checkboxGroup4" size="mini" disabled>\n      <el-checkbox-button-dispatcher v-for="city in cities" :label="city" :key="city">{{ city }}</el-checkbox-button-dispatcher>\n    </el-checkbox-group-dispatcher>\n  </div>\n</template>\n\n<script>\nconst cityOptions = [\'上海\', \'北京\', \'广州\', \'深圳\']\nexport default {\n  data () {\n    return {\n      checkboxGroup1: [\'上海\'],\n      checkboxGroup2: [\'上海\'],\n      checkboxGroup3: [\'上海\'],\n      checkboxGroup4: [\'上海\'],\n      cities: cityOptions\n    }\n  }\n}\n<\/script>\n')])])])],2),e._m(3),c("demo-block",[c("div",[c("p",[e._v("自定义分隔符，优先级高于局部配置和全局配置。")])]),c("template",{slot:"source"},[c("element-demo3")],1),c("template",{slot:"highlight"},[c("pre",{pre:!0},[c("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <el-checkbox-group-dispatcher v-model="checkList" rw-dispatcher-separator="and">\n    <el-checkbox-dispatcher label="复选框 A"><span style="color: red">123</span></el-checkbox-dispatcher>\n    <el-checkbox-dispatcher label="复选框 B" />\n    <el-checkbox-dispatcher label="复选框 C" />\n    <el-checkbox-dispatcher label="禁用" disabled />\n    <el-checkbox-dispatcher label="选中且禁用" disabled />\n  </el-checkbox-group-dispatcher>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      checkList: [\'选中且禁用\', \'复选框 A\']\n    }\n  }\n}\n<\/script>\n')])])])],2),e._m(4),c("demo-block",[c("div",[c("p",[e._v("通过组件的props属性 "),c("code",[e._v("${namespace}-state(kebeb-case)")]),e._v(" 或 "),c("code",[e._v("${namespace}State(camelCase)")]),e._v(" 控制 read or write 状态。优先级高于 局部配置的 ${namespace}State")])]),c("template",{slot:"source"},[c("element-demo4")],1),c("template",{slot:"highlight"},[c("pre",{pre:!0},[c("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <el-form label-width="120px">\n    <el-form-item label="checkbox">\n      <el-checkbox-dispatcher\n        v-model="form.checkbox"\n        :rw-dispatcher-state="state.checkbox"\n        style="width: 400px"\n      >备选项</el-checkbox-dispatcher>\n      <el-button\n        type="text"\n        :icon="icon.checkbox"\n        @click="toggleState(\'checkbox\')"\n      />\n    </el-form-item>\n    <el-form-item label="checkbox-group">\n      <el-checkbox-group-dispatcher\n        v-model="form.checkboxGroup"\n        :rw-dispatcher-state="state.checkboxGroup"\n        style="width: 400px; display: inline-block"\n      >\n        <el-checkbox-dispatcher label="复选框 A" :rw-dispatcher-state="state.checkboxGroup">\n          <span style="color: red">123</span>\n        </el-checkbox-dispatcher>\n        <el-checkbox-dispatcher label="复选框 B" :rw-dispatcher-state="state.checkboxGroup" />\n        <el-checkbox-dispatcher label="复选框 C" :rw-dispatcher-state="state.checkboxGroup" />\n        <el-checkbox-dispatcher label="禁用" :rw-dispatcher-state="state.checkboxGroup" disabled />\n      </el-checkbox-group-dispatcher>\n      <el-button\n        type="text"\n        :icon="icon.checkboxGroup"\n        @click="toggleState(\'checkboxGroup\')"\n      />\n    </el-form-item>\n    <el-form-item label="checkbox-button">\n      <el-checkbox-group-dispatcher\n        v-model="form.checkboxButton"\n        :rw-dispatcher-state="state.checkboxButton"\n        style="width: 400px; display: inline-block"\n      >\n        <el-checkbox-button-dispatcher\n          v-for="city in cities"\n          :label="city"\n          :key="city"\n          :rw-dispatcher-state="state.checkboxButton"\n        >\n          {{ city }}\n        </el-checkbox-button-dispatcher>\n      </el-checkbox-group-dispatcher>\n      <el-button\n        type="text"\n        :icon="icon.checkboxButton"\n        @click="toggleState(\'checkboxButton\')"\n      />\n    </el-form-item>\n  </el-form>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      form: {\n        checkbox: true,\n        checkboxGroup: [\'复选框 A\'],\n        checkboxButton: [\'上海\']\n      },\n      state: {\n        checkbox: \'write\',\n        checkboxGroup: \'write\',\n        checkboxButton: \'write\'\n      },\n      icon: {\n        checkbox: \'el-icon-view\',\n        checkboxGroup: \'el-icon-view\',\n        checkboxButton: \'el-icon-view\'\n      },\n      cities: [\'上海\', \'北京\', \'广州\', \'深圳\']\n    }\n  },\n  methods: {\n    toggleState (key) {\n      if (this.state[key] === \'write\') {\n        this.state[key] = \'read\'\n        this.icon[key] = \'el-icon-edit\'\n      } else {\n        this.state[key] = \'write\'\n        this.icon[key] = \'el-icon-view\'\n      }\n    }\n  }\n}\n<\/script>\n')])])])],2),e._m(5),e._m(6),c("demo-block",[c("div",[c("p",[e._v("通过组件的props属性 "),c("code",[e._v("${namespace}-render(kebeb-case)")]),e._v(" 或 "),c("code",[e._v("${namespace}Render(camelCase)")]),e._v(" 自定义 read 状态的渲染函数。ElCheckboxDispatcher、ElCheckboxButtonDispatcher 的用法一致。")])]),c("template",{slot:"source"},[c("element-demo5")],1),c("template",{slot:"highlight"},[c("pre",{pre:!0},[c("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <el-checkbox-dispatcher v-model="checked" :rw-dispatcher-render="checkboxRender">\n    备选项\n  </el-checkbox-dispatcher>\n  <div style="margin: 15px 0;" />\n  <el-checkbox-group-dispatcher v-model="checkList" :rw-dispatcher-render="checkboxGroupRender">\n    <el-checkbox-dispatcher label="复选框 A">\n      <span style="color: red">123</span>\n    </el-checkbox-dispatcher>\n    <el-checkbox-dispatcher label="复选框 B" />\n    <el-checkbox-dispatcher label="复选框 C" />\n    <el-checkbox-dispatcher label="禁用" disabled />\n    <el-checkbox-dispatcher label="选中且禁用" disabled />\n  </el-checkbox-group-dispatcher>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      checked: true,\n      checkList: [\'选中且禁用\', \'复选框 A\']\n    }\n  },\n  methods: {\n    checkboxRender (h, context) {\n      const { value } = context.data.attrs\n      if (value) {\n        return h(\'span\', {\n          style: { color: \'green\' }\n        }, context.children)\n      } else {\n        return null\n      }\n    },\n    checkboxGroupRender (h, context) {\n      const { data, children } = context\n      const { value } = data.attrs\n      const vnodes = children.map(item => {\n        if (!item.data) {\n          return null\n        } else if (value.includes(item.data.attrs.label)) {\n          return item.children || item.data.attrs.label\n        } else {\n          return null\n        }\n      })\n        .filter(item => item)\n      return h(\'div\', {\n        style: { color: \'green\' }\n      }, vnodes)\n    }\n  }\n}\n<\/script>\n')])])])],2),e._m(7),c("demo-block",[c("div",[c("p",[e._v("通过 "),c("code",[e._v("#${namespace}Render")]),e._v("（cabelCase） 或 "),c("code",[e._v("v-slot:${namespace}Render")]),e._v("（cabelCase） 自定义 read 状态的渲染函数。ElCheckboxDispatcher、ElCheckboxButtonDispatcher 的用法一致。")])]),c("template",{slot:"source"},[c("element-demo6")],1),c("template",{slot:"highlight"},[c("pre",{pre:!0},[c("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <el-checkbox-dispatcher v-model="checked">\n    备选项\n    <template #rwDispatcherRender="{ data, children }">\n      <span style="color: red">{{ getCheckboxLabel(data, children) }}</span>\n    </template>\n  </el-checkbox-dispatcher>\n  <div style="margin: 15px 0;" />\n  <el-checkbox-group-dispatcher v-model="checkList">\n    <template #rwDispatcherRender="{ data }">\n      <span style="color: red">{{ getCheckboxGroupLabels(data) }}</span>\n    </template>\n    <el-checkbox-dispatcher label="复选框 A">\n      <span style="color: red">123</span>\n    </el-checkbox-dispatcher>\n    <el-checkbox-dispatcher label="复选框 B" />\n    <el-checkbox-dispatcher label="复选框 C" />\n    <el-checkbox-dispatcher label="禁用" disabled />\n    <el-checkbox-dispatcher label="选中且禁用" disabled />\n  </el-checkbox-group-dispatcher>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      checked: true,\n      checkList: [\'选中且禁用\', \'复选框 A\']\n    }\n  },\n  methods: {\n    getCheckboxLabel (data, children) {\n      if (data.attrs.value) {\n        return children[0].text.trim()\n      } else {\n        return \'\'\n      }\n    },\n    getCheckboxGroupLabels (data) {\n      return data.attrs.value.join(\' | \')\n    }\n  }\n}\n<\/script>\n')])])])],2),e._m(8),c("element-attributes"),e._m(9),c("element-scope-slot"),e._m(10),c("element-attributes"),e._m(11),c("element-scope-slot"),e._m(12),c("element-attributes",{scopedSlots:e._u([{key:"append",fn:function(){return[c("tr",[c("td",[e._v("${namespace}-separator"),c("br"),e._v("（默认 rw-dispatcher-separator）")]),c("td",[e._v("自定义分隔符")]),c("td",[e._v("String")]),c("td",[e._v("|")])])]},proxy:!0}])}),e._m(13),c("element-scope-slot"),e._m(14),e._m(15)],1)},n=[function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"ji-chu-yong-fa"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#ji-chu-yong-fa","aria-hidden":"true"}},[e._v("¶")]),e._v(" 基础用法")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"duo-xuan-kuang-zu"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#duo-xuan-kuang-zu","aria-hidden":"true"}},[e._v("¶")]),e._v(" 多选框组")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"an-niu-yang-shi"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#an-niu-yang-shi","aria-hidden":"true"}},[e._v("¶")]),e._v(" 按钮样式")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"fen-ge-fu"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#fen-ge-fu","aria-hidden":"true"}},[e._v("¶")]),e._v(" 分隔符")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"zu-jian-pei-zhi----zhuang-tai"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#zu-jian-pei-zhi----zhuang-tai","aria-hidden":"true"}},[e._v("¶")]),e._v(" 组件配置 — 状态")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("div",{staticClass:"tip"},[c("p",[e._v("// TODO")]),c("p",[e._v("由于渲染顺序的原因，el-checkbox-group-dispatcher 和它的子组件(el-checkbox、el-checkbox-button)都要设置统一的 state。这显然不利于开发体验，\n希望在以后的版本能改进这个问题。")])])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"zi-ding-yi-xuan-ran-han-shu----props"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#zi-ding-yi-xuan-ran-han-shu----props","aria-hidden":"true"}},[e._v("¶")]),e._v(" 自定义渲染函数 — props")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"zi-ding-yi-xuan-ran-han-shu----slot"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#zi-ding-yi-xuan-ran-han-shu----slot","aria-hidden":"true"}},[e._v("¶")]),e._v(" 自定义渲染函数 — slot")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"checkbox-attributes"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#checkbox-attributes","aria-hidden":"true"}},[e._v("¶")]),e._v(" Checkbox Attributes")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"checkbox-scoped-slots"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#checkbox-scoped-slots","aria-hidden":"true"}},[e._v("¶")]),e._v(" Checkbox Scoped Slots")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"checkboxbutton-attributes"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#checkboxbutton-attributes","aria-hidden":"true"}},[e._v("¶")]),e._v(" CheckboxButton Attributes")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"checkboxbutton-scoped-slots"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#checkboxbutton-scoped-slots","aria-hidden":"true"}},[e._v("¶")]),e._v(" CheckboxButton Scoped Slots")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"checkboxgroup-attributes"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#checkboxgroup-attributes","aria-hidden":"true"}},[e._v("¶")]),e._v(" CheckboxGroup Attributes")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"checkboxgroup-scoped-slots"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#checkboxgroup-scoped-slots","aria-hidden":"true"}},[e._v("¶")]),e._v(" CheckboxGroup Scoped Slots")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("h3",{attrs:{id:"qi-ta-shu-xing-slots-events"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#qi-ta-shu-xing-slots-events","aria-hidden":"true"}},[e._v("¶")]),e._v(" 其他属性、Slots、Events")])},function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("p",[e._v("与官方 "),c("code",[e._v("ElCheckbox")]),e._v("、 "),c("code",[e._v("ElCheckboxGroup")]),e._v("、 "),c("code",[e._v("ElCheckboxButton")]),e._v(" 的完全一致，"),c("a",{attrs:{href:"https://element.eleme.cn/#/zh-CN/component/checkbox#checkbox-attributes"}},[e._v("官方组件")]),e._v("。")])}],a=(c("8e6e"),c("ac6a"),c("456d"),c("6762"),c("2fdb"),c("bd86"));function o(e,t){var c=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),c.push.apply(c,r)}return c}function s(e){for(var t=1;t<arguments.length;t++){var c=null!=arguments[t]?arguments[t]:{};t%2?o(c,!0).forEach((function(t){Object(a["a"])(e,t,c[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(c)):o(c).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(c,t))}))}return e}var l={name:"component-doc",components:{"element-demo0":function(){var e=function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("div",[[c("el-checkbox-dispatcher",{model:{value:e.checked,callback:function(t){e.checked=t},expression:"checked"}},[e._v("备选项")])]],2)},t=[],c={data:function(){return{checked:!0}}};return s({render:e,staticRenderFns:t},c)}(),"element-demo1":function(){var e=function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("div",[[c("el-checkbox-group-dispatcher",{model:{value:e.checkList,callback:function(t){e.checkList=t},expression:"checkList"}},[c("el-checkbox-dispatcher",{attrs:{label:"复选框 A"}},[c("span",{staticStyle:{color:"red"}},[e._v("123")])]),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"复选框 B"}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"复选框 C"}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"禁用",disabled:""}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"选中且禁用",disabled:""}})],1)]],2)},t=[],c={data:function(){return{checkList:["选中且禁用","复选框 A"]}}};return s({render:e,staticRenderFns:t},c)}(),"element-demo2":function(){var e=function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("div",[[c("div",[c("el-checkbox-group-dispatcher",{model:{value:e.checkboxGroup1,callback:function(t){e.checkboxGroup1=t},expression:"checkboxGroup1"}},e._l(e.cities,(function(t){return c("el-checkbox-button-dispatcher",{key:t,attrs:{label:t}},[e._v(e._s(t))])})),1)],1),e._v(" "),c("div",{staticStyle:{"margin-top":"20px"}},[c("el-checkbox-group-dispatcher",{attrs:{size:"medium"},model:{value:e.checkboxGroup2,callback:function(t){e.checkboxGroup2=t},expression:"checkboxGroup2"}},e._l(e.cities,(function(t){return c("el-checkbox-button-dispatcher",{key:t,attrs:{label:t}},[e._v(e._s(t))])})),1)],1),e._v(" "),c("div",{staticStyle:{"margin-top":"20px"}},[c("el-checkbox-group-dispatcher",{attrs:{size:"small"},model:{value:e.checkboxGroup3,callback:function(t){e.checkboxGroup3=t},expression:"checkboxGroup3"}},e._l(e.cities,(function(t){return c("el-checkbox-button-dispatcher",{key:t,attrs:{label:t,disabled:"北京"===t}},[e._v(e._s(t))])})),1)],1),e._v(" "),c("div",{staticStyle:{"margin-top":"20px"}},[c("el-checkbox-group-dispatcher",{attrs:{size:"mini",disabled:""},model:{value:e.checkboxGroup4,callback:function(t){e.checkboxGroup4=t},expression:"checkboxGroup4"}},e._l(e.cities,(function(t){return c("el-checkbox-button-dispatcher",{key:t,attrs:{label:t}},[e._v(e._s(t))])})),1)],1)]],2)},t=[],c=["上海","北京","广州","深圳"],r={data:function(){return{checkboxGroup1:["上海"],checkboxGroup2:["上海"],checkboxGroup3:["上海"],checkboxGroup4:["上海"],cities:c}}};return s({render:e,staticRenderFns:t},r)}(),"element-demo3":function(){var e=function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("div",[[c("el-checkbox-group-dispatcher",{attrs:{"rw-dispatcher-separator":"and"},model:{value:e.checkList,callback:function(t){e.checkList=t},expression:"checkList"}},[c("el-checkbox-dispatcher",{attrs:{label:"复选框 A"}},[c("span",{staticStyle:{color:"red"}},[e._v("123")])]),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"复选框 B"}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"复选框 C"}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"禁用",disabled:""}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"选中且禁用",disabled:""}})],1)]],2)},t=[],c={data:function(){return{checkList:["选中且禁用","复选框 A"]}}};return s({render:e,staticRenderFns:t},c)}(),"element-demo4":function(){var e=function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("div",[[c("el-form",{attrs:{"label-width":"120px"}},[c("el-form-item",{attrs:{label:"checkbox"}},[c("el-checkbox-dispatcher",{staticStyle:{width:"400px"},attrs:{"rw-dispatcher-state":e.state.checkbox},model:{value:e.form.checkbox,callback:function(t){e.$set(e.form,"checkbox",t)},expression:"form.checkbox"}},[e._v("备选项")]),e._v(" "),c("el-button",{attrs:{type:"text",icon:e.icon.checkbox},on:{click:function(t){return e.toggleState("checkbox")}}})],1),e._v(" "),c("el-form-item",{attrs:{label:"checkbox-group"}},[c("el-checkbox-group-dispatcher",{staticStyle:{width:"400px",display:"inline-block"},attrs:{"rw-dispatcher-state":e.state.checkboxGroup},model:{value:e.form.checkboxGroup,callback:function(t){e.$set(e.form,"checkboxGroup",t)},expression:"form.checkboxGroup"}},[c("el-checkbox-dispatcher",{attrs:{label:"复选框 A","rw-dispatcher-state":e.state.checkboxGroup}},[c("span",{staticStyle:{color:"red"}},[e._v("123")])]),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"复选框 B","rw-dispatcher-state":e.state.checkboxGroup}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"复选框 C","rw-dispatcher-state":e.state.checkboxGroup}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"禁用","rw-dispatcher-state":e.state.checkboxGroup,disabled:""}})],1),e._v(" "),c("el-button",{attrs:{type:"text",icon:e.icon.checkboxGroup},on:{click:function(t){return e.toggleState("checkboxGroup")}}})],1),e._v(" "),c("el-form-item",{attrs:{label:"checkbox-button"}},[c("el-checkbox-group-dispatcher",{staticStyle:{width:"400px",display:"inline-block"},attrs:{"rw-dispatcher-state":e.state.checkboxButton},model:{value:e.form.checkboxButton,callback:function(t){e.$set(e.form,"checkboxButton",t)},expression:"form.checkboxButton"}},e._l(e.cities,(function(t){return c("el-checkbox-button-dispatcher",{key:t,attrs:{label:t,"rw-dispatcher-state":e.state.checkboxButton}},[e._v("\n          "+e._s(t)+"\n        ")])})),1),e._v(" "),c("el-button",{attrs:{type:"text",icon:e.icon.checkboxButton},on:{click:function(t){return e.toggleState("checkboxButton")}}})],1)],1)]],2)},t=[],c={data:function(){return{form:{checkbox:!0,checkboxGroup:["复选框 A"],checkboxButton:["上海"]},state:{checkbox:"write",checkboxGroup:"write",checkboxButton:"write"},icon:{checkbox:"el-icon-view",checkboxGroup:"el-icon-view",checkboxButton:"el-icon-view"},cities:["上海","北京","广州","深圳"]}},methods:{toggleState:function(e){"write"===this.state[e]?(this.state[e]="read",this.icon[e]="el-icon-edit"):(this.state[e]="write",this.icon[e]="el-icon-view")}}};return s({render:e,staticRenderFns:t},c)}(),"element-demo5":function(){var e=function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("div",[[c("el-checkbox-dispatcher",{attrs:{"rw-dispatcher-render":e.checkboxRender},model:{value:e.checked,callback:function(t){e.checked=t},expression:"checked"}},[e._v("\n    备选项\n  ")]),e._v(" "),c("div",{staticStyle:{margin:"15px 0"}}),e._v(" "),c("el-checkbox-group-dispatcher",{attrs:{"rw-dispatcher-render":e.checkboxGroupRender},model:{value:e.checkList,callback:function(t){e.checkList=t},expression:"checkList"}},[c("el-checkbox-dispatcher",{attrs:{label:"复选框 A"}},[c("span",{staticStyle:{color:"red"}},[e._v("123")])]),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"复选框 B"}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"复选框 C"}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"禁用",disabled:""}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"选中且禁用",disabled:""}})],1)]],2)},t=[],c={data:function(){return{checked:!0,checkList:["选中且禁用","复选框 A"]}},methods:{checkboxRender:function(e,t){var c=t.data.attrs.value;return c?e("span",{style:{color:"green"}},t.children):null},checkboxGroupRender:function(e,t){var c=t.data,r=t.children,n=c.attrs.value,a=r.map((function(e){return e.data&&n.includes(e.data.attrs.label)?e.children||e.data.attrs.label:null})).filter((function(e){return e}));return e("div",{style:{color:"green"}},a)}}};return s({render:e,staticRenderFns:t},c)}(),"element-demo6":function(){var e=function(){var e=this,t=e.$createElement,c=e._self._c||t;return c("div",[[c("el-checkbox-dispatcher",{scopedSlots:e._u([{key:"rwDispatcherRender",fn:function(t){var r=t.data,n=t.children;return[c("span",{staticStyle:{color:"red"}},[e._v(e._s(e.getCheckboxLabel(r,n)))])]}}]),model:{value:e.checked,callback:function(t){e.checked=t},expression:"checked"}},[e._v("\n    备选项\n    ")]),e._v(" "),c("div",{staticStyle:{margin:"15px 0"}}),e._v(" "),c("el-checkbox-group-dispatcher",{scopedSlots:e._u([{key:"rwDispatcherRender",fn:function(t){var r=t.data;return[c("span",{staticStyle:{color:"red"}},[e._v(e._s(e.getCheckboxGroupLabels(r)))])]}}]),model:{value:e.checkList,callback:function(t){e.checkList=t},expression:"checkList"}},[e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"复选框 A"}},[c("span",{staticStyle:{color:"red"}},[e._v("123")])]),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"复选框 B"}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"复选框 C"}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"禁用",disabled:""}}),e._v(" "),c("el-checkbox-dispatcher",{attrs:{label:"选中且禁用",disabled:""}})],1)]],2)},t=[],c={data:function(){return{checked:!0,checkList:["选中且禁用","复选框 A"]}},methods:{getCheckboxLabel:function(e,t){return e.attrs.value?t[0].text.trim():""},getCheckboxGroupLabels:function(e){return e.attrs.value.join(" | ")}}};return s({render:e,staticRenderFns:t},c)}()}},i=l,h=c("2877"),d=Object(h["a"])(i,r,n,!1,null,null,null);t["default"]=d.exports}}]);
//# sourceMappingURL=chunk-2d0e528e.a1549f71.js.map